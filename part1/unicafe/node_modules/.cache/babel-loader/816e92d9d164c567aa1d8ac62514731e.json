{"ast":null,"code":"var _jsxFileName = \"E:\\\\project\\\\fullstack\\\\part1\\\\unicafe\\\\src\\\\index.js\";\nimport React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\n\nconst Statistics = props => {\n  const good = props.good;\n  const bad = props.bad;\n  const neutral = props.neutral;\n  const total = props.total;\n  const percent = props.percent;\n  const average = props.average;\n\n  if (total === 0) {\n    return /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 7\n      }\n    }, \"Click button to generate stats\");\n  } else {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 5\n      }\n    }, \"Statistics\"), /*#__PURE__*/React.createElement(\"table\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 9\n      }\n    }, \"good\"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 9\n      }\n    }, good)), /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 9\n      }\n    }, \"neutral\"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 9\n      }\n    }, neutral)), /*#__PURE__*/React.createElement(\"tr\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }\n    }, \"bad\"), /*#__PURE__*/React.createElement(\"td\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }\n    }, bad))));\n  }\n};\n\nconst Button = props => {\n  const fun = props.fun;\n  const name = props.name;\n  return /*#__PURE__*/React.createElement(\"button\", {\n    onClick: fun,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 5\n    }\n  }, name);\n};\n\nconst App = () => {\n  // save clicks of each button to own state\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n  const total = good + bad + neutral;\n  const percent = good / total * 100;\n  const average = (good + bad * -1) / 3;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }\n  }, \"give feedback\"), /*#__PURE__*/React.createElement(Button, {\n    fun: () => setGood(good + 1),\n    name: \"good\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    fun: () => setNeutral(neutral + 1),\n    name: \"neutral\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    fun: () => setBad(bad + 1),\n    name: \"bad\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 16\n    }\n  }), /*#__PURE__*/React.createElement(Statistics, {\n    good: good,\n    bad: bad,\n    neutral: neutral,\n    total: total,\n    percent: percent,\n    average: average,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }\n  }));\n};\n\nReactDOM.render( /*#__PURE__*/React.createElement(App, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 17\n  }\n}), document.getElementById('root'));","map":{"version":3,"sources":["E:/project/fullstack/part1/unicafe/src/index.js"],"names":["React","useState","ReactDOM","Statistics","props","good","bad","neutral","total","percent","average","Button","fun","name","App","setGood","setNeutral","setBad","render","document","getElementById"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\r\nimport ReactDOM from 'react-dom'\r\n\r\nconst Statistics = (props) =>{\r\n  const good = props.good\r\n  const bad = props.bad\r\n  const neutral = props.neutral\r\n  const total = props.total \r\n  const percent = props.percent \r\n  const average = props.average \r\n  if (total===0){\r\n    return(\r\n      <p>Click button to generate stats</p>\r\n    )\r\n  }\r\n  else{\r\n  return(\r\n    <div>\r\n    <h2>Statistics</h2>\r\n    <table>\r\n      <tr>\r\n        <td>good</td>\r\n        <td>{good}</td>\r\n      </tr>\r\n      <tr>\r\n        <td>neutral</td>\r\n        <td>{neutral}</td>\r\n      </tr>\r\n      <tr>\r\n        <td>bad</td>\r\n        <td>{bad}</td>\r\n      </tr>\r\n    </table>\r\n    </div>\r\n  )}\r\n}\r\n\r\nconst Button = (props) => {\r\n  const fun=props.fun\r\n  const name=props.name\r\n  return(\r\n    <button onClick={fun}>{name}</button>\r\n  )\r\n}\r\n\r\nconst App = () => {\r\n  // save clicks of each button to own state\r\n  const [good, setGood] = useState(0)\r\n  const [neutral, setNeutral] = useState(0)\r\n  const [bad, setBad] = useState(0)\r\n  const total=good+bad+neutral\r\n  const percent=(good/total)*100\r\n  const average = (good+(bad*-1))/3\r\n\r\n  return (\r\n    <div>\r\n      <h1>give feedback</h1>\r\n      <Button fun={()=>setGood(good+1)} name='good' />\r\n      <Button fun={()=>setNeutral(neutral+1)} name='neutral' />\r\n      <Button fun={()=>setBad(bad+1)} name='bad' />\r\n      <br></br><br></br>\r\n      <Statistics good={good} bad={bad} neutral={neutral} total={total} percent={percent} average={average} />\r\n    </div>\r\n  )\r\n}\r\n\r\nReactDOM.render(<App />, \r\n  document.getElementById('root')\r\n)"]},"metadata":{},"sourceType":"module"}