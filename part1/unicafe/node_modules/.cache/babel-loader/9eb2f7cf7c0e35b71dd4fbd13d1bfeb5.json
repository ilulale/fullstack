{"ast":null,"code":"var _jsxFileName = \"E:\\\\project\\\\fullstack\\\\part1\\\\unicafe\\\\src\\\\index.js\";\nimport React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\n\nconst Average = props => {\n  const good = props.good;\n  const bad = props.bad;\n  const neutral = props.neutral;\n  const average = (good + bad * -1) / 3;\n  return /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 5\n    }\n  }, \"Average:\", average);\n};\n\nconst Ppercent = props => {\n  const good = props.good;\n  const total = props.total;\n  const percent = good / total * 100;\n  return /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 5\n    }\n  }, \"Positive:\", percent, \"%\");\n};\n\nconst Statistics = props => {\n  const good = props.good;\n  const bad = props.bad;\n  const neutral = props.neutral;\n\n  if (good + bad + neutral === 0) {\n    return /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 7\n      }\n    }, \"Click button to generate stats\");\n  } else {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 5\n      }\n    }, \"Statistics\"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 5\n      }\n    }, \"Good:\", good), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 5\n      }\n    }, \"Neutral:\", neutral), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 5\n      }\n    }, \"Bad:\", bad), /*#__PURE__*/React.createElement(Average, {\n      good: good,\n      bad: bad,\n      neutral: neutral,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 5\n      }\n    }), /*#__PURE__*/React.createElement(Ppercent, {\n      good: good,\n      total: good + bad + neutral,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 5\n      }\n    }));\n  }\n};\n\nconst Button = props => {\n  const fun = props.fun;\n  const name = props.name;\n  return /*#__PURE__*/React.createElement(\"button\", {\n    onClick: fun,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 5\n    }\n  }, name);\n};\n\nconst App = () => {\n  // save clicks of each button to own state\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }\n  }, \"give feedback\"), /*#__PURE__*/React.createElement(Button, {\n    fun: () => setGood(good + 1),\n    name: \"good\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => setNeutral(neutral + 1),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }\n  }, \"neutral\"), /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => setBad(bad + 1),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }\n  }, \"bad\"), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 16\n    }\n  }), /*#__PURE__*/React.createElement(Statistics, {\n    good: good,\n    bad: bad,\n    neutral: neutral,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }\n  }));\n};\n\nReactDOM.render( /*#__PURE__*/React.createElement(App, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 17\n  }\n}), document.getElementById('root'));","map":{"version":3,"sources":["E:/project/fullstack/part1/unicafe/src/index.js"],"names":["React","useState","ReactDOM","Average","props","good","bad","neutral","average","Ppercent","total","percent","Statistics","Button","fun","name","App","setGood","setNeutral","setBad","render","document","getElementById"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\r\nimport ReactDOM from 'react-dom'\r\n\r\nconst Average = (props) =>{\r\n  const good = props.good\r\n  const bad = props.bad\r\n  const neutral = props.neutral\r\n\r\n  const average = (good+(bad*-1))/3\r\n  return(\r\n    <p>Average:{average}</p>\r\n  )\r\n}\r\n\r\nconst Ppercent = (props) => {\r\n  const good=props.good\r\n  const total=props.total\r\n  const percent=(good/total)*100\r\n  return(\r\n    <p>Positive:{percent}%</p>\r\n  )\r\n}\r\n\r\nconst Statistics = (props) =>{\r\n  const good = props.good\r\n  const bad = props.bad\r\n  const neutral = props.neutral \r\n  if (good+bad+neutral===0){\r\n    return(\r\n      <p>Click button to generate stats</p>\r\n    )\r\n  }\r\n  else{\r\n  return(\r\n    <div>\r\n    <h2>Statistics</h2>\r\n    <p>Good:{good}</p>\r\n    <p>Neutral:{neutral}</p>\r\n    <p>Bad:{bad}</p>\r\n    <Average good={good} bad={bad} neutral={neutral} />\r\n    <Ppercent good={good} total={good+bad+neutral} />\r\n    </div>\r\n  )}\r\n}\r\n\r\nconst Button = (props) => {\r\n  const fun=props.fun\r\n  const name=props.name\r\n  return(\r\n    <button onClick={fun}>{name}</button>\r\n  )\r\n}\r\n\r\nconst App = () => {\r\n  // save clicks of each button to own state\r\n  const [good, setGood] = useState(0)\r\n  const [neutral, setNeutral] = useState(0)\r\n  const [bad, setBad] = useState(0)\r\n\r\n  return (\r\n    <div>\r\n      <h1>give feedback</h1>\r\n      <Button fun={()=>setGood(good+1)} name='good' />\r\n      <button onClick={()=>setNeutral(neutral+1)}>neutral</button>\r\n      <button onClick={()=>setBad(bad+1)}>bad</button>\r\n      <br></br><br></br>\r\n      <Statistics good={good} bad={bad} neutral={neutral} />\r\n    </div>\r\n  )\r\n}\r\n\r\nReactDOM.render(<App />, \r\n  document.getElementById('root')\r\n)"]},"metadata":{},"sourceType":"module"}