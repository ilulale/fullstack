{"ast":null,"code":"var _jsxFileName = \"E:\\\\project\\\\fullstack\\\\part1\\\\unicafe\\\\src\\\\index.js\";\nimport React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\n\nconst Average = props => {\n  const good = props.good;\n  const bad = props.bad;\n  const neutral = props.neutral;\n  const average = (good + bad * -1) / 3;\n  return /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 5\n    }\n  }, \"Average:\", average);\n};\n\nconst Ppercent = props => {\n  const good = props.good;\n  const total = props.total;\n  const percent = good / total * 100;\n  return /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 5\n    }\n  }, \"Positive:\", percent, \"%\");\n};\n\nconst Stat = props => {\n  const name = props.name;\n  const nameval = props.val;\n  const total = props.total;\n\n  if (total === 0) {\n    return /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 7\n      }\n    }, \"Click button to generate stats\");\n  } else {\n    return /*#__PURE__*/React.createElement(Statistics, {\n      name: name,\n      val: nameval,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 7\n      }\n    });\n  }\n};\n\nconst Statistics = props => {\n  const name = props.name;\n  const nameval = props.val;\n  return /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 4\n    }\n  }, name, \":\", nameval);\n};\n\nconst Button = props => {\n  const fun = props.fun;\n  const name = props.name;\n  return /*#__PURE__*/React.createElement(\"button\", {\n    onClick: fun,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 5\n    }\n  }, name);\n};\n\nconst App = () => {\n  // save clicks of each button to own state\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n  const total = good + bad + neutral;\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }\n  }, \"give feedback\"), /*#__PURE__*/React.createElement(Button, {\n    fun: () => setGood(good + 1),\n    name: \"good\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    fun: () => setNeutral(neutral + 1),\n    name: \"neutral\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    fun: () => setBad(bad + 1),\n    name: \"bad\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"br\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 16\n    }\n  }), /*#__PURE__*/React.createElement(Statistics, {\n    name: \"good\",\n    val: good,\n    total: total,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Statistics, {\n    name: \"neutral\",\n    val: neutral,\n    total: total,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(Statistics, {\n    name: \"bad\",\n    val: bad,\n    total: total,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }\n  }));\n};\n\nReactDOM.render( /*#__PURE__*/React.createElement(App, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 17\n  }\n}), document.getElementById('root'));","map":{"version":3,"sources":["E:/project/fullstack/part1/unicafe/src/index.js"],"names":["React","useState","ReactDOM","Average","props","good","bad","neutral","average","Ppercent","total","percent","Stat","name","nameval","val","Statistics","Button","fun","App","setGood","setNeutral","setBad","render","document","getElementById"],"mappings":"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","sourcesContent":["import React, { useState } from 'react'\r\nimport ReactDOM from 'react-dom'\r\n\r\nconst Average = (props) =>{\r\n  const good = props.good\r\n  const bad = props.bad\r\n  const neutral = props.neutral\r\n\r\n  const average = (good+(bad*-1))/3\r\n  return(\r\n    <p>Average:{average}</p>\r\n  )\r\n}\r\n\r\nconst Ppercent = (props) => {\r\n  const good=props.good\r\n  const total=props.total\r\n  const percent=(good/total)*100\r\n  return(\r\n    <p>Positive:{percent}%</p>\r\n  )\r\n}\r\n\r\nconst Stat = (props) =>{\r\n  const name= props.name\r\n  const nameval=props.val\r\n  const total = props.total\r\n  if(total===0){\r\n    return(\r\n      <p>Click button to generate stats</p>\r\n    )\r\n  }else{\r\n    return(\r\n      <Statistics name={name} val={nameval} />\r\n    )\r\n  }\r\n}\r\n\r\nconst Statistics = (props) =>{\r\n const name = props.name\r\n const nameval = props.val\r\n return(\r\n   <p>{name}:{nameval}</p>\r\n )\r\n}\r\n\r\nconst Button = (props) => {\r\n  const fun=props.fun\r\n  const name=props.name\r\n  return(\r\n    <button onClick={fun}>{name}</button>\r\n  )\r\n}\r\n\r\nconst App = () => {\r\n  // save clicks of each button to own state\r\n  const [good, setGood] = useState(0)\r\n  const [neutral, setNeutral] = useState(0)\r\n  const [bad, setBad] = useState(0)\r\n  const total=good+bad+neutral\r\n\r\n  return (\r\n    <div>\r\n      <h1>give feedback</h1>\r\n      <Button fun={()=>setGood(good+1)} name='good' />\r\n      <Button fun={()=>setNeutral(neutral+1)} name='neutral' />\r\n      <Button fun={()=>setBad(bad+1)} name='bad' />\r\n      <br></br><br></br>\r\n      <Statistics name='good' val={good} total={total} />\r\n      <Statistics name='neutral' val={neutral} total={total} />\r\n      <Statistics name='bad' val={bad} total={total} />\r\n    </div>\r\n  )\r\n}\r\n\r\nReactDOM.render(<App />, \r\n  document.getElementById('root')\r\n)"]},"metadata":{},"sourceType":"module"}